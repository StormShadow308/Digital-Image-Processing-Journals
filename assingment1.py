# -*- coding: utf-8 -*-
"""Assingment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eipi7jS0H68Zw4KP0BaBSzN2jVC6yGAf
"""

import requests
response=requests.get("http://www.datasciencecourse.org")
#response.status_code
#response.content
#response.headers
#response.headers['Content-Type']

response

response.history

import requests
params={"sa":"t", "rct":"j", "q":"", "esrc":"s", "source":"web", "cd":"9", "cad":"rja", "uact":"8"}
response = requests.get("http://www.google.com/url", params=params)

def find_shortest_path(graph, start_node, end_node, current_path=[], current_distance=0, visited=None):
    if visited is None:
        visited = set()

    visited.add(start_node)

    if start_node == end_node:
        return current_path

    shortest_path = None
    shortest_distance = float('inf')

    for neighbor in graph.get(start_node, []):
        if neighbor not in visited:
            path = find_shortest_path(graph, neighbor, end_node, current_path + [neighbor], current_distance + 1, visited)
            if path and (len(path) < shortest_distance):
                shortest_path = path
                shortest_distance = len(path)

    return shortest_path

graph = {'A': ['B', 'C'],
        'B': ['C', 'D'],
        'C': ['D', 'F'],
        'D': ['C', 'E'],
        'E': ['F'],
        'F': ['C', 'E']}

shortest_path = find_shortest_path(graph, 'A', 'E')

if shortest_path:
    print("Shortest path from 'A' to 'E':", shortest_path)
else:
    print("No path exists from 'A' to 'E'.")

import numpy as np
x=[1,2,3]
y=[4,6,2]
print("The Dot Product is: ", np.dot(x,y))

import csv
import requests
from bs4 import BeautifulSoup

# Define the military equipment of interest
MILITARY_EQUIPMENT = "Sniper_rifle"
URL = f"https://en.wikipedia.org/wiki/{MILITARY_EQUIPMENT}"

# Send an HTTP request to fetch the content of the URL
response = requests.get(URL)

# Check if the request was successful
if response.status_code == 200:
    # Parse the HTML content
    soup = BeautifulSoup(response.text, "html.parser")

    # Find associated items
    associated_items = [item.text.strip() for item in soup.find_all("li")]

    # Save the results in a CSV file
    with open(f"{MILITARY_EQUIPMENT}_associated_items.csv", "w", newline="", encoding="utf-8") as csvfile:
        fieldnames = ["Item"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        for item in associated_items:
            writer.writerow({"Item": item})
else:
    print(f"Failed to fetch data from {URL}")

import numpy as np
import matplotlib.pyplot as plt
data = np.random.normal(loc=0, scale=1, size=100)
outliers = np.random.normal(loc=5, scale=2, size=10)
data_with_outliers = np.concatenate((data, outliers))
plt.figure(figsize=(8, 6))
plt.boxplot(data_with_outliers)
plt.title('Box Plot of Random Noisy Data with Outliers')
plt.xlabel('Data')
plt.ylabel('Values')
plt.show()
skewness = np.mean(data_with_outliers) - np.median(data_with_outliers)
print("Skewness with respect to outliers:", skewness)

import random

def euclidean_distance(point1, point2):
    """Calculate Euclidean distance between two points."""
    return sum((p1 - p2)**2 for p1, p2 in zip(point1, point2)) ** 0.5

def initiate_centroids(data, k):
    """Initialize k centroids randomly from the data points."""
    centroids = random.sample(data, k)
    return centroids

def assign_clusters(data, centroids):
    """Assign each data point to the nearest centroid based on Euclidean distance."""
    clusters = {i: [] for i in range(len(centroids))}
    for data_point in data:
        nearest_centroid = min(centroids, key=lambda centroid: euclidean_distance(data_point, centroid))
        clusters[centroids.index(nearest_centroid)].append(data_point)
    return clusters

def recompute_centroids(clusters):
    """Recompute the centroids as the mean of the data points assigned to each centroid."""
    centroids = [tuple(sum(cluster, ()) / len(cluster)) for cluster in clusters.values()]
    return centroids

def k_means(data, k, max_iterations):
    """Apply the k-means clustering algorithm."""
    centroids = initiate_centroids(data, k)
    for _ in range(max_iterations):
        clusters = assign_clusters(data, centroids)
        centroids = recompute_centroids(clusters)
        if clusters == assign_clusters(data, centroids):
            break
    print("Final centroids:", centroids)
    print("Cluster assignments:", [list(cluster).index(point) for point in data])
    return centroids, [list(cluster).index(point) for point in data]

data = [
[1.0, 2.0],
[1.5, 1.8],
[5.0, 8.0],
[8.0, 8.0],
[1.0, 0.6],
[9.0, 11.0],
[8.0, 2.0],
[10.0, 2.0],
[9.0, 3.0]
]
k_means(data, 3, 100)

import random

def euclidean_distance(point1, point2):
    """Calculate Euclidean distance between two points."""
    return sum((p1 - p2)**2 for p1, p2 in zip(point1, point2)) ** 0.5

def initiate_centroids(data, k):
    """Initialize k centroids randomly from the data points."""
    centroids = random.sample(data, k)
    return centroids

def assign_clusters(data, centroids):
    """Assign each data point to the nearest centroid based on Euclidean distance."""
    clusters = {i: [] for i in range(len(centroids))}
    for data_point in data:
        nearest_centroid = min(centroids, key=lambda centroid: euclidean_distance(data_point, centroid))
        clusters[centroids.index(nearest_centroid)].append(data_point)
    return clusters

def k_means(data, k, max_iterations):
    """Apply the k-means clustering algorithm."""
    centroids = initiate_centroids(data, k)
    for _ in range(max_iterations):
        clusters = assign_clusters(data, centroids)
        centroids = [tuple(sum(cluster, [0, 0]) / len(cluster)) for cluster in clusters.values()]
        if clusters == assign_clusters(data, centroids):
            break
    print("Final centroids:", centroids)
    print("Cluster assignments:", [list(cluster).index(point) for point in data])
    return centroids, [list(cluster).index(point) for point in data]

data = [
[1.0, 2.0],
[1.5, 1.8],
[5.0, 8.0],
[8.0, 8.0],
[1.0, 0.6],
[9.0, 11.0],
[8.0, 2.0],
[10.0, 2.0],
[9.0, 3.0]
]
k_means(data, 3, 100)

import random
import math

def euclidean_distance(point1, point2):
    return math.sqrt(sum([(a - b) ** 2 for a, b in zip(point1, point2)]))
def k_means(data, k, max_iterations):
    centroids = random.sample(data, k)
    for iteration in range(max_iterations):
        clusters = [[] for _ in range(k)]
        for point in data:
            distances = [euclidean_distance(point, centroid) for centroid in centroids]
            nearest_centroid_index = distances.index(min(distances))
            clusters[nearest_centroid_index].append(point)
        new_centroids = [tuple(sum(dim) / len(cluster) for dim in zip(*cluster)) for cluster in clusters]
        if new_centroids == centroids:
            break
        centroids = new_centroids
    print("Final Centroids:")
    for i, centroid in enumerate(centroids):
        print(f"Centroid {i+1}: {centroid}")
    print("\nCluster Assignments:")
    for i, cluster in enumerate(clusters):
        print(f"Cluster {i+1}: {cluster}")
    return centroids, clusters
data = [
    [1.0, 2.0],
    [1.5, 1.8],
    [5.0, 8.0],
    [8.0, 8.0],
    [1.0, 0.6],
    [9.0, 11.0],
    [8.0, 2.0],
    [10.0, 2.0],
    [9.0, 3.0]
]
k = 3
max_iterations = 100
final_centroids, cluster_assignments = k_means(data, k, max_iterations)

import tensorflow as tf
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

iris_data = load_iris()
X_data, y_data = iris_data.data, iris_data.target

X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(3, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.1)

test_loss, test_accuracy = model.evaluate(X_test_scaled, y_test)
print("Test Loss:", test_loss)
print("Test Accuracy:", test_accuracy)

import tensorflow as tf
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

iris_data = load_iris()
X_data, y_data = iris_data.data, iris_data.target

X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(3, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.1)

test_loss, test_accuracy = model.evaluate(X_test_scaled, y_test)
print("Test Loss:", test_loss)
print("Test Accuracy:", test_accuracy)

import numpy as np

def step_activation_function(x):
    return 1 if x >= 0 else 0

def perceptron_output(input_data, weights, bias):
    weighted_sum = np.dot(input_data, weights) + bias
    return step_activation_function(weighted_sum)

weights = np.array([0.0, 0.0])
bias = 0.2
learning_rate = 0.1

training_data = np.array([
    [0, 0, 0],
    [0, 1, 0],
    [1, 0, 0],
    [1, 1, 1]
])

for _ in range(1000):
    for x1, x2, y in training_data:
        inputs = np.array([x1, x2])
        predicted_output = perceptron_output(inputs, weights, bias)
        error = y - predicted_output
        weights += learning_rate * error * inputs
        bias += learning_rate * error

print("Learned weights:", weights)
print("Learned bias:", bias)

# Install necessary packages
!pip install torch torchvision torchaudio
!pip install git+https://github.com/ultralytics/yolov5

# Import libraries
import torch
from PIL import Image
from torchvision import transforms
from matplotlib import pyplot as plt

# Load the YOLOv5 model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# Define the path to the satellite image
satellite_image_path = '/content/drive/MyDrive/yolov4-tiny/training/Extra3/test/0000002_jpg.rf.31bb0c5a2ed2e5b050827a2193200e98.jpg'

# Load and preprocess the satellite image
image = Image.open(satellite_image_path)
transform = transforms.Compose([
    transforms.Resize((640, 640)),  # Resize the image to fit the model input size
    transforms.ToTensor(),  # Convert the image to a PyTorch tensor
])
image_tensor = transform(image).unsqueeze(0)  # Add a batch dimension to the input tensor

# Perform object detection on the satellite image
results.render()
predictions = results.pred[0]

# Get the detected bounding boxes, class labels, and confidence scores
boxes = predictions[:, :4].cpu().numpy()
labels = predictions[:, 5].cpu().numpy().astype(int)
scores = predictions[:, 4].cpu().numpy()


# Plot the original image
plt.imshow(image)
plt.axis('off')

# Plot each detected object with its label and confidence score
for box, label, score in zip(boxes, labels, scores):
    plt.rectangle(xy=(box[0], box[1]), width=box[2] - box[0], height=box[3] - box[1], fill=False, color='red')
    plt.text(x=box[0], y=box[1], s=f'{model.names[int(label)]} {score:.2f}', color='red', fontsize=10)

# Show the plot
plt.show()

import random

# Define the players
player, weak_player = 'x', 'o'

# Function to check if there are moves left on the board
def isMovesLeft(board):
    for row in board:
        if '_' in row:
            return True
    return False

# Function to print the board
def print_board(board):
    for row in board:
        print(' '.join(row))
    print()

# Function to evaluate the board
def evaluate(b):
    for row in range(3):
        if b[row][0] == b[row][1] and b[row][1] == b[row][2]:
            if b[row][0] == player:
                return 10
            elif b[row][0] == weak_player:
                return -10
    for col in range(3):
        if b[0][col] == b[1][col] and b[1][col] == b[2][col]:
            if b[0][col] == player:
                return 10
            elif b[0][col] == weak_player:
                return -10
    if b[0][0] == b[1][1] and b[1][1] == b[2][2]:
        if b[0][0] == player:
            return 10
        elif b[0][0] == weak_player:
            return -10
    if b[0][2] == b[1][1] and b[1][1] == b[2][0]:
        if b[0][2] == player:
            return 10
        elif b[0][2] == weak_player:
            return -10
    return 0

# Function to define the desirability of a state for the weak player
def heuristic_evaluate(board):
    score = 0
    for row in range(3):
        for col in range(3):
            if board[row][col] == weak_player:
                score -= 1
            elif board[row][col] == player:
                score += 1
    return score

# Function to get all available moves
def get_available_moves(board):
    moves = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                moves.append((i, j))
    return moves

# Minimax function
def minimax(board, depth, isMax):
    score = evaluate(board)
    if score == 10 or score == -10:
        return score
    if not isMovesLeft(board):
        return 0

    if isMax:
        best = -1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = player
                    best = max(best, minimax(board, depth + 1, not isMax))
                    board[i][j] = '_'
        return best
    else:
        best = 1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = weak_player
                    best = min(best, minimax(board, depth + 1, not isMax))
                    board[i][j] = '_'
        return best

# Function for the weak player's move using heuristic evaluation
def weak_player_move(board, banned_tile=None):
    available_moves = get_available_moves(board)
    if banned_tile:
        available_moves.remove(banned_tile)

    move_scores = []
    for move in available_moves:
        row, col = move
        board[row][col] = weak_player
        move_scores.append((move, heuristic_evaluate(board)))
        board[row][col] = '_'

    if move_scores:
        move_scores.sort(key=lambda x: x[1])
        mid_moves = move_scores[1:-1]  # Avoid best and worst moves
        if mid_moves:
            chosen_move = random.choice(mid_moves)[0]
        else:
            chosen_move = random.choice(available_moves)
    else:
        chosen_move = random.choice(available_moves)

    board[chosen_move[0]][chosen_move[1]] = weak_player

# Function to get the best move for the player using minimax
def findBestMove(board):
    bestVal = -1000
    bestMove = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                board[i][j] = player
                moveVal = minimax(board, 0, False)
                board[i][j] = '_'
                if moveVal > bestVal:
                    bestMove = (i, j)
                    bestVal = moveVal
    return bestMove

# Main game loop
def play_game():
    board = [['_' for _ in range(3)] for _ in range(3)]
    banned_tile = random.choice(get_available_moves(board))

    turn = random.choice([player, weak_player])
    print(f"Weak player will not use tile: {banned_tile}")

    while isMovesLeft(board):
        print_board(board)

        if turn == player:
            move = findBestMove(board)
            if move == (-1, -1):
                break
            board[move[0]][move[1]] = player
            turn = weak_player
        else:
            weak_player_move(board, banned_tile)
            turn = player

        score = evaluate(board)
        if score == 10:
            print_board(board)
            print("Player (x) wins!")
            return
        elif score == -10:
            print_board(board)
            print("Weak Player (o) wins!")
            return

    print_board(board)
    print("It's a tie!")

play_game()

pip install langchain

pip install openai

# Sample input string
input_string = """
No. 1 1171 ZAINA AMIR 3 2 2841 MUNEEBA AROOJ 2 3 8277 ADEENA CHAUDHRY 2 4 660 SEHAJ NAEEM 3 5 1767 MUHAMMAD HASEEB KHAN 3 6 3040 KHADIJAH IRFAN SHAMI 1 7 8544 AMYNI FAISAL 3 8 8549 AMYNI FAISAL 3 9 594 MUHAMMAD ANAS 2 10 6947 MUHAMMAD UMAR SHAUKAT 2 11 3335 FATIMA QAISAR 3 12 2326 HASHAM ABDULLAH 2 13 863 AHSEN ALI SIDDIQUI 1 14 4304 YUSRA TAHIR 3 15 3046 MUHAMMAD SAAD HASSAN 1 16 341 YUSUF KAMRAN RASHID 2 17 902 ZAINAB ALAVI 1 18 8270 AYESHA MANSOOR 2 19 3681 WAHEED YOUSAFZAI 2 20 8884 MOHAMMAD ANAS KHAN 2 21 3437 SYEDA ANAM ALI 2 22 4703 M UMAR 2 23 5523 OMAIMAH TAUSEEF 1 24 5201 SYED MUHAMMAD HAIDER SHAH 1 25 1958 KHADIJA NIAZ 3 26 3241 FARMAN KHAN AFRIDI 1 27 6046 DAYAN AATIF 1 28 3731 SYED MUHAMMAD HAIDER SHAH 2 29 2294 SAAD SALMAN 2 30 7019 HASSAN JAVED 2 31 988 SHANZEH JARAL 1 32 7866 MUHAMMAD AHMAD MIRZA 3 33 8288 ASAD ALI 3 34 2748 HASNAT ASHRAF 1 35 4193 MUHAMMAD IBRAHEEM ARSHAD 1 36 2786 ZAIN ASHRAF 2 37 1286 FATIMA HASSAN 2 38 2691 AHMAD BILAL 2 39 1214 RAJA MUHAMMAD TAHA EBAAD 2 40 3131 SAAD AHMAD SARGAANA 3 41 9308 WANIA ATEEQ 2 42 789 SAKINA NASIR 1 43 2993 FATIMA NOOR 2 44 4700 MOMNA BASHIR 2 45 3805 MOHAMMAD KHAN 2 46 5362 MUHAMMAD IBRAHIM 2 47 4808 MISHAL NAWAZ 2 48 6405 HAREEM SHAHZAD 2 49 8908 ZAID QAYYUM 2 50 6057 MARVA HANIF 1 51 2031 HAMMAD KHAN 2 52 7230 HAIDER KAMRAN 2 53 567 AHMAD BILAL ZAHEER 1 54 9147 ABDULLAH BIN JAFFER SULTAN 2 55 355 SARDAR MUHAMMAD ABDUL QAYYUM KHAN 3 56 8429 SARMAD SAIFULLAH 3 57 1006 NOORULAIN IDREES 1 58 2488 WAFA TAHIR 3 59 4223 IMTISAL FATIMA 3 60 6464 MANAHIL FATIMA 2 61 6792 MOAZZAM IRSHAD 1 62 7709 SHAHERYAR AHMED MIR 3 63 3943 ARSHMA ASIF 3 64 1224 ALI HUSSAIN 2 65 5027 MUHAMMAD TALHA 1 66 9178 FARHAN IQBAL 1 67 6344 HASSAN IDREES 2 68 1676 MABOOR JAVED 2 69 5490 AMREEN USMAN 2 70 6173 MUHAMMAD MUGHEES KHAN 3 71 1584 MUHAMMAD IBRAHIM 1 72 3853 AFIFA FATIMA HARAL 2 73 4029 FARHAN AHMAD 3 74 8099 SHANZA AHMAD 2 75 4308 WAQAS AHMAD 2 76 2615 LUBNA ZAMIR 2 77 6271 UZAIR AKHTAR 2 78 3849 ZONAIRA CHOUDHARY 1 79 2084 HANIA BILAL 1 80 7465 BILAL ARSHAD MEHAL 2 81 6427 MUSYUIB ABBAS 3 82 2370 UMAIMA IRFAN QURESHI 2 83 2284 MAHEEN AMIR 2 84 4440 HASAN JAN 2 85 4651 UMAR ABDULLAH AZAM 1 86 1772 GHULAM SARWAR 2 87 4522 BILAD AHMAD 3 88 3983 YASHMA JAVED 2 89 5119 FILZA AHMAD 2 90 3857 RAMEESHA KHAN 2 91 7457 HAIDER ALI 2 92 7332 ZAHRA KHUZAIMA 2 93 3725 RAAHIM HASAN ZAHID 1 94 7861 KASHAF UL KHAIR MANSOOR 1 95 1424 ALEENA HAMID 1 96 2973 AREEBA SIDDIQUI 3 97 9155 WAREESHA KHAN 3 98 4838 HAFIZ MUHAMMAD ABUZAR QURESHI 2 99 7063 HUSSAIN FAROOQ MALIK 1 100 1646 FATIMA BINT E NAEEM 1 101 5588 HASSAN ABDULLAH KHAN 2 102 6085 ABDUL REHMAN 2 103 9392 SADAM HUSSAIN 3 104 8660 ALISHBA AMAN 2 105 726 EMAN ALI 2 106 2583 MUHAMMAD UMER FAROOQUE 2 107 385 SYEDA MARZIA 1 108 3832 MARYAM MASHHOOD 3 109 4821 KASHMALA REHMAN 2 110 4787 DUAA MIRAJ 3 111 6793 SYED HASEEB HUSSAIN SHAH 3 112 3993 MUHAMMAD SAQIB 1 113 3906 MANTHAR ALI 2 114 2156 SYED FASEEH ULLAH SHAH 3 115 8381 SAQUIB HUSSAIN 3 116 3017 GULEENA KHAN 2 117 6339 EEMAAN KHALID KHAN 1 118 4507 HAIDER ALI 1 119 5813 HANIA ISHFAQ 3 120 3657 SHEHRYAR KHURRAM 2 121 1344 MUHAMMAD MUJATABA 2 122 8926 AROONA NOOR 1 123 7899 HASSAN KAMRAN 3 124 3117 ADIL RAZA 2 125 3039 ZALA MASOOD 2 126 7810 MUHAMMAD ALI 1 127 6753 ARIZ MAJEED 1 128 8778 MUHAMMAD BILAL KAMRAN 1 129 7100 JAVERIA LIAQAT 2 130 3401 SYED MOHSIN ALI ZAIDI 2 131 3518 AINA AYAZ 1 132 6985 SYED BASHIR AHMAD 1 133 4967 LINTA KHAN 2 134 3265 UMAR ISMAIL MALIK 2 135 5360 MUHAMMAD AZFAR MIRZA 1 136 6967 MUHAMMAD SAIFULLAH KHALID 2 137 9300 MUHAMMAD UMAR 2 138 5118 AOON MUHAMMAD 1 139 7338 FARHAN TARIQ 1 140 7710 ESHAL ZAKIR 1 141 4327 MUHAMMAD AIZAZ ALI 2 142 4439 UMER FAIQ 1 143 4030 SARAH ABBAS 1 144 4984 KAINAT FATIMA 2 145 935 SYED MUHAMMAD WAJEEH HUSSAIN 2 146 4096 SHAH ZEB 1 147 8505 NUBAID MUJTABA GONDAL 3 148 5249 SAQLAIN AHMAD 3 149 527 MUHAMMAD AALYAN ZAHID 1 150 2674 MUHAMMAD FAHAD 1 151 2665 MUHAMMAD AIMAL KHAN 3 152 6120 ABU HURAIRAH 2 153 3685 PIR MEHMOOD UL HASSAN 1 154 750 AYAAN NOOR 1 155 5751 ATIZAZ AIMAL 2 156 7292 AHMAD BILAL 1 157 2648 MUHAMMAD ALI 2 158 5887 ALEENA MAZHAR 1 159 2115 SANDEEP KUMAR 2 160 6285 ANUM UR REHMAN 2 161 3080 MALAIKA MARYAM 1 162 4609 MUHAMMAD IRFAN 2 163 6567 AZFAREEN HABIB 2 164 2073 KHAWAJA HAMZA AHMED 2 165 1250 RAIBAAL SHAHID 2 166 6915 EHSAN MALIK 2 167 182 ALEEZA BABAR 1 168 6665 USWA FATIMA 1 169 3581 SORATH IMTIAZ 2 170 5134 MAHNOOR IRFAN 2 171 8373 AHMED PARACHA 1 172 5844 MUHAMMAD NOUMAN SALEEM 2 173 4339 MUHAMMAD NAEEM FRIDE 3 174 2334 HUZAIM SHAUKAT 1 175 4813 MUHAMMAD MOMIN ZEESHAN 2 176 5823 FATIMAH KHAN 1 177 6066 MUQADDAS ZAREEN 2 178 3106 MUHAMMAD SADEEM 1 179 7274 AAMIR RIAZ 2 180 1902 MOHAMMAD HASSAN RAZA KAZMI 2 181 6897 MUHAMMAD ANAS HASSAM 2 182 2330 MUHAMMAD HASAN 1 183 6584 SARAH RASHID 2 184 3407 EMAAN ZAHID MALIK 3 185 3632 SHEHERYAR KHAN 2 186 6826 AYESHA WAHEED MALIK 2 187 5640 ALI HYDER 2 188 5426 AMNA EJAZ 1 189 3433 MOHAMMAD MALIK 2 190 5473 AMNA HASSAN 2 191 1367 SYED ZEESHAN ABID 1 192 6080 TOOBA AMJAD ABBASI 2 193 7334 YAMNA KAMAL 1 194 3245 JAVERIA RAZA 2 195 8583 ROHAMA BILAL 1 196 5568 MUHAMMAD SHAHEER ABDULLAH 2 197 8838 AQSA ABDUL SATTAR 1 198 3370 MOMINA SUFIAN 1 199 7969 UMAR SHUAIB KARIM 1 200 4099 SYED SHAH NAWAZ SHAH 2 201 8946 TUFAIL JAN 1 202 8295 ANASHA ASHAR 2 203 7483 ANUM TARIQ 2 204 7837 MALIK ABDULLAH AWAN 2 205 471 MALIK ABDUL MANAN JILLANI 1 206 1812 ALI ABBAS 1 207 1189 AMNAH MAKNOON NIAZ 1 208 7086 ZIGAR NAWAZ KHAN 3 209 251 MAQSOOD LATIF 2 210 5546 MUHAMMAD KASHIF KHAN 1 211 3048 WALI MUHAMMAD KHAN 1 212 873 AREEJ JALIL 2 213 6752 AYAN AHMED 1 214 2318 MUHAMMAD ADAN 3 215 4068 SYED ALI QUMAIL NAQVI 1 216 2894 JIBREEL KHAN 1 217 5574 ZOYA FATIMA 2 218 5586 MUHAMMAD HUSSAIN 1 219 7901 SHAYAN ALI MIRANI 2 220 6909 GULALAY 3 221 3749 MUHAMMAD ABDULLAH 2 222 9179 MUHAMMAD YASIR 3 223 6082 MIQAIL KHAN ZAFFAR 2 224 2830 QURATULAIN MIR 3 225 6884 ABDURREHMAN 1 226 3434 MUHAMMAD SALAR MALIK 1 227 379 SARA FOUAD 2 228 7394 ALI HAMZA 3 229 5001 AMNA SIDDIQUI 2 230 8360 MUHAMMAD BIN AMIR 2 231 3629 HARUN AMJAD KHAN 1 232 2682 FATIMA AMAN KHAN 3 233 9002 MOOSA BIN WAQAR 2 234 2300 AYELA NOOR 2 235 4312 IBRAHIM ANJUM 2 236 3633 SALAR MAQSOOD ABBASI 2 237 3073 ZUNNOURAIN 2 238 1561 AMMAR BASHIR 2 239 5287 MUHAMMAD SAQLAIN ZAHID 1 240 1711 TUGRUL AZAM KHAN 1 241 6547 HAMNA BAKHSH 1 242 2236 SHARIF ULLAH 1 243 2043 SARFRAZ AHMED 1 244 1333 ESHA ABRAR 2 245 4376 AYESHA RAMEEN 3 246 587 MUHAMMAD HUSSAM MALIK 1 247 4478 MUHAMMAD SHUJA ABBAS NAQVI 1 248 4548 MALIA ADNAN 2 249 4318 MUHAMMAD HUZAIFAH RAFIQUE MALIK 2 250 3418 IMAMA NASEEM 2 251 2168 MUHAMMAD TAHA AAMIR 1 252 4921 ASWAH KHILJI 3 253 7852 SAROSH KHAN 1 254 1808 HAMMAD UR REHMAN 1 255 6900 ROHAAN ULLAH KHALID JUTT 2 256 8275 AREENA ALI 2 257 3989 SYED MUDABBIR ADNAN 1 258 3845 MASAB ASHAN 2 259 7349 MUHAMMAD ABU HURAIRA 3 260 4556 ALI HYDER 3 261 2943 SYEDA MAHNOOR FATIMA 2 262 5543 AQSA GUL 3 263 4760 SYEDA SHANZA ZAINAB 2 264 3574 RABIA FAROOQ 2 265 5886 MUHAMMAD TAHA ALI 3 266 5682 ZAIN AHMED 2 267 3076 HUSSAIN NASIR 1 268 1883 AROOJ FATIMA CHEEMA 3 269 6048 MOHAMMAD EHSANULLAH 2 270 9124 MUHAMMAD AWAIS 3 271 601 FAISAL ZUBAIR 2 272 5547 SYED MUHAMMAD SHAHYAN RAZA NAQVI 1 273 8494 EMANIA MARYAM KHAN YOUSAFZAI 2 274 2371 ANMOLE NADIR RAO 3 275 7565 MAHAVIZ QURESHI 2 276 3654 PALWASHA MALIK 2 277 7159 ALI HAMZA 1 278 3561 ALEENA CHANWAIZ 3 279 8449 KAINAT RIZWAN 2 280 8720 RAJA MUHAMMAD USMAN IMDAD KHAN 1 281 4242 TAYYABA UROOJ 3 282 1355 AHMER MUNIR 1 283 7267 SYED SUDAIF MURTAZA BUKHARI 2 284 4266 MOHSIN 2 285 7806 IFRAH QURESHI 1 286 7156 RAIHAN MUHAMMAD 2 287 4622 ADAN FATIMA 1 288 1843 MUHAMMAD AHSAN ABBAS 2 289 505 SYED SHAMOON HAIDER 3 290 3416 KIEZER 2 291 4280 MUHAMMAD HUZAIFA ARIF 2 292 2231 MUHAMMAD AFFAN TAHIR 2 293 999 MAHNOOR BASIT 2 294 8568 BASEER AHMAD KHAN 2 295 2664 SAAD ISLAM 3 296 2591 RAJA RUMAN TAHIR 1 297 8717 MUHAMMAD MUNEEB KHAN 2 298 4564 LARAIB ARIF 2 299 8701 MAZHAR FAREED 2 300 8454 MUHAMMAD AREEB ADIL 1 301 3074 ANUSHAY NAEEM 1 302 5243 HAFSA AHMAD 1 303 3023 HUZAIFA HUSSAIN 2 304 7872 FARAZ HUSSAIN 2 305 2453 FARZAIN ALI 2 306 1537 MUHAMMAD SHAH AFGHAN 2 307 6366 HAMNA BINT E AMAN 2 308 2907 IZHAR ULLAH 2 309 5906 ADEEL ANJUM 3 310 3011 FARHAN ALI MUSTAFA 2 311 6578 FAIZAN NASIR 2 312 8892 SULEMAN SAQIB 1 313 3185 MUHAMMAD SHERDIL UMAR KIANI 2 314 4951 MUHAMMAD SAAD ABDUR REHMAN 3 315 5504 MUSHAFFAQ FATIMA 3 316 7881 ZARJAN KHAN 2 317 5259 AAMIR AHMAD 2 318 8727 MUHAMMAD ADEEL 1 319 8960 MAAZ AMIR 2 320 4750 MUHAMMAD ROHAN KAMAL 1 321 2262 HAMNA AROOJ 2 322 5936 AFAQ AHMAD 3 323 2076 AAIHAN AHMED MUGHAL 1 324 8772 IBRAHEEM KHALID 1 325 2497 MUHAMMAD IBRAHIM DURRANI 3 326 3461 AFEERAH KHURRAM RANA 3 327 2227 HAMZA RIZWAN KHATTAK 3 328 3153 SHUMAYL FAROOQ 3 329 8140 AMIR ZOHAIB KHAN 2 330 4526 MUHAMMAD KHAYAM NASIR 2 331 1952 ZAINAB RASHEED 2 332 6995 MUHAMMAD ZARAE ALTAF 1 333 8615 AZAIM ALI GHAZI 2 334 1624 ABDUL AHAD MEHMOOD 1 335 2166 IBRAHIM IMRAN QURESHI 1 336 6549 ALI AHRAR SAEEDI 2 337 7551 USAMA ZAFAR 2 338 8967 MALEEKA ABDUL MANNAN 2 339 6232 ASJID TANWEER 2 340 3935 SHAHMURAD 2 341 3932 ABDUL MUSTAGHAN 2 342 7297 USMAN MUNIR 2 343 8641 BASIT ALI 3 344 5397 AABEEHA KHAN 1 345 7419 SHER ALI 2 346 583 ABDUL REHMAN 3 347 3903 MUHAMMAD UMAIR KHALIL 1 348 5248 MUHAMMAD IBRAHIM 1 349 2807 SHAHID ALI 3 350 7199 GHIAS UD DIN QAYYUM 2 351 7801 MUHAMMAD ALI 2 352 8919 MUHAMMAD BIN EJAZ 2 353 5479 SANTOSH KUMAR 2 354 4963 CYRUS SUNIL BHATTI 1 355 8618 SYED MUHAMMAD SHAYAN GILLANI 2 356 2306 FAHAD BILAL 2 357 4285 AHMED ALI KHALID 2 358 6926 MUHAMMAD MUBASSIR AWAN 1 359 3963 ESHA OWAIS KHAN 2 360 8301 ZAINAB MALIK 1 361 8460 HAMNAH IMAM 1 362 5085 HAMNA NASIR 3 363 7170 MEHRAN MUZAFAR HUSSAIN 2 364 4416 SHERAZ AHMED 2 365 4369 KHUBAB NASIR 3 366 5811 HAFSA KASHIF 1 367 3233 MUHAMMAD HAMID SHAH 1 368 8418 SHEZAL FATIMA 1 369 4965 MUHAMMAD IBRAHIM JAVEID 2 370 7981 MUHAMMAD ABDULLAH KHAN 3 371 7809 NEHA ADIL 1 372 3262 ZAINAB MANSOOR CHUGHTAI 1 373 8789 KASHIF HUSSAIN 1 374 5295 MARIA KHURRAM BUTT 1 375 4054 MUQEET REHMAN 2 376 8883 MUHAMMAD KAMIL 2 377 4391 ABRAR UL HAQUE 3 378 4935 MUHAMMAD MASHKAR KHAN 2 379 3684 MUHAMMAD HAMZA RAJA 2 380 3799 MUHAMMAD ORWA BIN AFTA 2 381 361 MUHAMMAD URAISH YAQOOB 2 382 4681 TABISH HAFEEZ 1 383 5855 SUFFIA ISRAR 3 384 5379 MARYAM NAVEED 3 385 4244 MAHNOOR HADIYA 1 386 7430 AHSAN FALAK 3 387 9384 ARMAN ALI 2 388 3485 HIBAH SYED 2 389 3600 MUHAMMAD ABDULLAH 3 390 2608 HASSAN AHMED BHAT 3 391 8687 MUHAMMAD UMAR 2 392 2390 ABUBAKAR JUBBIR 3 393 2207 IFFA SAJID 2 394 4814 RAJA USMAN JAHANGIR KIANI 1 395 4968 ISHRAT SHOUKAT 3 396 2828 MUSTAFA 1 397 4773 USHNA SHAHID 3 398 5446 AHMED SWATI 3 399 7557 SHAHZAIB GONDAL 2 400 8532 HAMZA HUSSIAN 2 401 9438 SAMEEN NASIR 1 402 5361 AFNAN KHAN 2 403 7964 ISBA TARIQ 2 404 5957 MUHAMMAD EHTASHAM KHAN 2 405 2746 MUHAMMAD HUSNAIN MALIK 2 406 6169 MUHAMMAD ABDUL RAHMAN 1 407 9359 MUHAMMAD AHMAD 3 408 7771 MALIK DAOUD KHAN UTRAA 3 409 7335 SHAHMIR ZAHID 2 410 2145 IMAAD ALI 2 411 3120 ABDULLAH KHAN 1 412 3125 NAFID ULLAH 3 413 5821 MUHAMMAD MOMIN RIZWAN 2 414 774 KHALDOON AHSAN 1 415 5143 MUHAMMAD UZAIR RIAZ 2 416 9273 MUHAMMAD JAFAR 1 417 1664 MUHAMMAD ASAD ULLAH BHATTI 1 418 3894 SALWA KHAN 2 419 3702 AYESHA BATOOL 1 420 2733 UMAIR ANEES 2 421 2035 MUHAMMAD HASAN BIN IDREES 3 422 1153 MUHAMMAD KAZIM 2 423 9275 MUHAMMAD HAMZA AFZAL 2 424 8124 SAJID HUSSAIN KHAN 3 425 730 HADIA TARIQ 3 426 1141 HADIYA EHTSHAM 1 427 4854 AMMR ABBAS SYED 1 428 4157 SYEDA ALISHBAH AHMAD 3 429 9060 SYED HASSAN ABBAS SHERAZI 2 430 5339 MUHAMMAD MAHAD SHABBIR 1 431 5256 HASSAN ABDURREHMAN 1 432 8826 MUHA BASAR KHAN 2 433 3745 AHMED SAEED 2 434 4049 ISMAIL SHAH 2 435 5035 HAMZA QADIR 2 436 3890 MUHAMMAD HASSAN KHAN 2 437 9073 MOAAZ BILAL 1 438 3877 SEEMA BIBI 2 439 2624 SHAHAB ULLAH 2 440 8346 SHAHZEB MALIK 1 441 8835 AYESHA NASIR KHAN 3 442 6458 AMINA 3 443 8851 MUHAMMAD IHTESHAM 1 444 4822 FIZZA BABAR 3 445 3758 MIR MUNEER ISLAM 2 446 1033 MUHAMMAD GANDAPUR 2 447 6714 AZIZURREHMAN 2 448 2534 RAJA WALEED IJAZ 1 449 3021 MUHAMMAD MUNEEB 3 450 8844 MUHAMMAD MAAZ KHAN TAJIK 1 451 4587 FATIMA ZAHRA 1 452 303 SYED ALI AKBAR SHAH 3 453 6729 AREESHA RIZWAN 1 454 8736 RAJA MUHAMMAD SAMIULLAH 2 455 3933 BISHARAT ALI SHAH 2 456 5420 SYED SHAH ZAIB BACHA 3 457 7132 ABDUL KAREEM 2 458 5157 MUHAMMAD UMAR 3 459 7826 MUHAMMAD ADIL 3 460 667 DAINA KAMRAN 1 461 5888 ABDUR RAFAE SALMAN 1 462 8626 SYED MUHAMMAD SHAYAN GILLANI 1 463 6773 USMAN JAMIL 3 464 812 ABDULLAH UMAIR KHAN 1 465 2180 BEHROZ KHAN 2 466 1599 MOOSA HABIB KHAN 1 467 6970 TAHA ABBAS 1 468 2048 ABDURRAHMAN 2 469 3519 TAHIR SAEED MALIK 3 470 6206 HAMZA IRFAN 2 471 382 SAYED NAVEED ABBAS 2 472 2415 AHMED BILAL 2 473 2861 MUZAMMIL HUSSAIN 1 474 7138 MOHAMMAD OMAR ZEESHAN 2 475 4132 AIMON AZHAR ALI 3 476 6770 MUHAMMAD WASIF KHAN 2 477 7161 AMMAR AKBAR 2 478 4052 ZUHA QURESHI 2 479 1686 MUZHGAN ASIF 2 480 5626 ISRAR AHMED 3 481 3895 AMINA SHAH 2 482 7421 MUHAMMAD ZEESHAN AHMAD 3 483 3320 MANAHIL YOUNIS 2 484 2806 HAIDER MEHDI 2 485 5687 LALLAIN HASHIM 3 486 8484 SALEEM ELAHI 2 487 2774 MUHAMMAD HASSAN RAZA 1 488 3421 SEEMAB ADNAN 1 489 2809 AMNA WALI 3 490 4491 GHULAM MURTAZA 2 491 7315 WAHAJ RIAZ 2 492 5010 MUHAMMAD ALI AKRAM 1 493 4673 AMMAR NAEEM 3 494 1822 GHAFIR ALI 1 495 4437 ESHAAL KHAN 1 496 2537 MARWAN IBRAHIM KHAN 1 497 1524 YASIR SAMI 2 498 804 MUHAMMAD ALI KHAN 2 499 3069 MUHAMMAD KHALID 3 500 4604 ABDULLAH IMRAN MUGHAL 3 501 8679 ESHA MALIK 1 502 8439 WASIQ IMRAN AHMED 2 503 3447 SHAYAN AHMAD 2 504 1781 MAAZ ALI RANA 2 505 5442 SUDAIS KHALIL 2 506 8061 MUZAMIL IQBAL 1 507 4149 HADI JAMIL 1 508 5666 SHAHMEER KHAN 1 509 6381 ZAINAB IJAZ 3 510 4078 GHULAM ALI 2 511 2783 G USMAN GHANI 2 512 6122 RAZZAQ ANWAR 2 513 425 QAZI AMINA REHMAN 2 514 4617 ALI RAZA 1 515 4835 MUHAMMAD HUSNAIN NASIR 2 516 8991 HAFIZ MUHAMMAD MUNEEB SHAHZAD 2 517 3327 BARYALE KHAN 1 518 2956 AISHA NADEEM SHAH 1 519 3496 UMAR HASSAN 3 520 7637 RAJA ABDULLAH KAMRAN 2 521 1361 ABDUL AHAD BIN JAMIL 2 522 5378 AAZMIR TAJ 2 523 7812 ADEEBA ARBAB ABBASI 2 524 7875 MUHAMMAD ADNAN KHAN 3 525 8997 NOWSHERVAN AHMED MALIK 3 526 3796 AHSAN SAJID 2 527 5619 AYESHA SIDDIQUA 1 528 6409 MUHAMMAD USMAN 1 529 2829 MUHAMMAD RAAHIM SHAUKAT 2 530 2245 SHAZIM SIDDIQUI 3 531 3208 MUHAMMAD MUSTAFA 1 532 4546 MUSFIRAH 2 533 6078 DANISH ALI 3 534 2688 ADEEB MUMTAZ KHAN 2 535 8600 LAIBA IHSAN KHATTAK 1 536 5253 SAMEER HUSSAIN 2 537 3293 HAMZA RIZWAN KHATTAK 2 538 8499 MIAN MUHAMMAD UZAIR 3 539 2710 DAWOOD QADEER 3 540 2853 ABDUR RAHEEM KHAN 2 541 2721 MUHAMMAD AHMAD 1 542 1005 ZAINAB RASHID ABBASI 2 543 4026 NOOR FATIMA 2 544 5919 ABDULLAH 3 545 3420 ABDUL MOIZ 2 546 5494 SAQIB SALIH 3 547 2005 MUHAMMAD SAAD SHARIF 2 548 422 MUHAMMAD AMEEN SIDDIQUI 1 549 7489 ABU UMAMA 2 550 5538 MUHAMMAD HUZAIFA MIRZA 1 551 1803 MINAHIL FATIMA 2 552 2496 ALISHBA ZAMAN 2 553 2911 MUDASSIR ZAID 2 554 6356 ROMAISA IBSIAR 3 555 8352 SABA SARWAR 1 556 7087 EMAN ZAINAB 3 557 8294 HAIDER ALI 1 558 9174 MUNEEB AHMED 2 559 4721 HAMZA KHAN 2 560 6432 DUA ANWAR 1 561 4829 BAHADUR ALI 2 562 1035 RANA ALI HASSAN 2 563 5571 MUHAMMAD TALHA 2 564 8769 AYESHA MASOOD 2 565 7968 IBRAHEEM ASIF 1 566 4216 HUZAIFA AMIN 2 567 996 KUNDAN ABRAHAM YASIR 3 568 1438 MUHAMMED RAFAY HAMEED KHAN 1 569 5875 AMNA WAHEED 3 570 5752 AIMAL MUEED 2 571 6125 AARIB SOHAIL CHEEMA 1 572 1876 UZAIR YOUSAF ZAI 2 573 325 KHAQAN ANWER HASHMI 1 574 3568 MUNEEBA REHMAN 2 575 6447 HAFSA JAMIL 3 576 4115 SYED MOHSIN ALI SHAH GILLANI 2 577 5776 MARJAN KHAN 3 578 3195 SYED BAASIL SAEED 3 579 5743 SADIFA ZAFAR 3 580 4652 ANAS AHMED 1 581 557 KAMRAN ALI 2 582 7129 SANGEEN KHAN 1 583 4348 MOHAMMAD AMEEN 3 584 5240 MAHNOOR KHURRAM 2 585 2130 ZAIN UL ABIDEEN 3 586 5670 MUQADAS RAZA 1 587 3337 MUHAMMAD HASHER SOHAIL KHAN 2 588 7741 SHAHID MEHMOOD 2 589 1158 SHAHWAIZ ALI 1 590 3623 IKRASH ABDULLAH 1 591 8286 MUHAMMAD AHSAN HUSSAIN AWAN 2 592 1477 MUHAMMAD SAIM 2 593 7660 HAFSA SHAFIQUE 1 594 8073 MUHAMMAD ISMAIL 1 595 2983 NOMAN KHAN 1 596 5431 NOOR NIAZI 2 597 4454 SANIA SAEED BAJWA 3 598 6385 UMAR ABDULLAH 1 599 4509 ZUNAIRA SAEED 2 600 7647 ABDULLAH SAJID 2
"""

# Splitting the string into words
words = input_string.split()

# List to store formatted data
formatted_data = []

i = 1
while i < len(words):
    try:
        record_number = words[i]
        id_number = words[i+1]

        # Capture the name (until the next number, which is the score)
        name_parts = []
        j = i + 2
        while not words[j].isdigit():
            name_parts.append(words[j])
            j += 1

        name = ' '.join(name_parts)
        score = words[j]

        formatted_data.append((record_number, id_number, name, score))

        # Move to the next record
        i = j + 1
    except IndexError:
        break  # Stop if we run out of data

# Printing the formatted data
print("{:<4} {:<6} {:<30} {:<5}".format('No.', 'ID', 'Name', 'Score'))
for record in formatted_data:
    print("{:<4} {:<6} {:<30} {:<5}".format(*record))

import cv2
import numpy as np
hd_image = cv2.imread('/content/images.png')
hd_image

small_image= cv2.imread('/content/blablabla.jpg')
small_image

x, y, w, h = 0, 0, small_image.shape[1], small_image.shape[0]

resized_image = cv2.resize(small_image, (w, h))

hd_image[y:y+h, x:x+w] = resized_image

import cv2
import numpy as np
hd_image = cv2.imread('/content/images.png')
small_image = cv2.imread('/content/blablabla.jpg')
if hd_image is None:
    print("Error: HD image not found or could not be loaded.")
elif small_image is None:
    print("Error: Small image not found or could not be loaded.")
else:
    hd_height, hd_width = hd_image.shape[:2]
    resized_image = cv2.resize(small_image, (hd_width, hd_height))
    hd_image[0:hd_height, 0:hd_width] = resized_image
    cv2.imshow("Mapped Image", hd_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    cv2.imwrite('mapped_hd_image.jpg', hd_image)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
hd_image = cv2.imread('/content/images.png')
small_image = cv2.imread('/content/blablabla.jpg')
x, y = 0, 0
region_width = 100
region_height = 100
resized_image = cv2.resize(small_image, (region_width, region_height))
if x + region_width <= hd_image.shape[1] and y + region_height <= hd_image.shape[0]:
    hd_image[y:y+region_height, x:x+region_width] = resized_image
    cv2_imshow(hd_image)
    cv2.imwrite('mapped_hd_image.jpg', hd_image)

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
hd_image = cv2.imread('/content/images.png')
small_image = cv2.imread('/content/blablabla.jpg')
if hd_image is None:
    print("Error: HD image not found or could not be loaded.")
elif small_image is None:
    print("Error: Small image not found or could not be loaded.")
else:
    hd_gray = cv2.cvtColor(hd_image, cv2.COLOR_BGR2GRAY)
    small_gray = cv2.cvtColor(small_image, cv2.COLOR_BGR2GRAY)
    hd_rgb = cv2.cvtColor(hd_image, cv2.COLOR_BGR2RGB)
    small_rgb = cv2.cvtColor(small_image, cv2.COLOR_BGR2RGB)
    _, hd_binary = cv2.threshold(hd_gray, 128, 255, cv2.THRESH_BINARY)
    _, small_binary = cv2.threshold(small_gray, 128, 255, cv2.THRESH_BINARY)
    plt.figure(figsize=(12, 8))
    plt.subplot(3, 2, 1)
    plt.imshow(cv2.cvtColor(hd_image, cv2.COLOR_BGR2RGB))
    plt.title('HD Image (Original)')
    plt.axis('off')
    plt.subplot(3, 2, 3)
    plt.imshow(hd_gray, cmap='gray')
    plt.title('HD Image (Grayscale)')
    plt.axis('off')
    plt.subplot(3, 2, 5)
    plt.imshow(hd_rgb)
    plt.title('HD Image (RGB)')
    plt.axis('off')
    plt.subplot(4, 2, 7)
    plt.imshow(hd_binary, cmap='gray')
    plt.title('HD Image (Binary)')
    plt.axis('off')
    plt.subplot(3, 2, 2)
    plt.imshow(cv2.cvtColor(small_image, cv2.COLOR_BGR2RGB))
    plt.title('Small Image (Original)')
    plt.axis('off')
    plt.subplot(3, 2, 4)
    plt.imshow(small_gray, cmap='gray')
    plt.title('Small Image (Grayscale)')
    plt.axis('off')
    plt.subplot(3, 2, 6)
    plt.imshow(small_rgb)
    plt.title('Small Image (RGB)')
    plt.axis('off')
    plt.subplot(4, 2, 8)
    plt.imshow(small_binary, cmap='gray')
    plt.title('Small Image (Binary)')
    plt.axis('off')
    plt.tight_layout()
    plt.show()

import cv2
import matplotlib.pyplot as plt
image = cv2.imread('/content/images.png')
if image is None:
    print("Error: Image not found or could not be loaded.")
else:
    rotated_90_clockwise = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)
    rotated_90_counterclockwise = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)
    rotated_180 = cv2.rotate(image, cv2.ROTATE_180)
    titles = ['Original', '90° Clockwise', '90° Counterclockwise', '180°']
    images = [image, rotated_90_clockwise, rotated_90_counterclockwise, rotated_180]
    plt.figure(figsize=(10, 8))
    for i in range(len(titles)):
        plt.subplot(2, 2, i + 1)
        plt.imshow(cv2.cvtColor(images[i], cv2.COLOR_BGR2RGB))
        plt.title(titles[i])
        plt.axis('off')
    plt.tight_layout()
    plt.show()

import cv2
import matplotlib.pyplot as plt
import numpy as np
from google.colab.patches import cv2_imshow
hd_image = cv2.imread('/content/images.png')

if hd_image is None:
    print("Error: HD image not found.")
else:
    x, y, width, height = 50, 50, 200, 200
    cropped_image = hd_image[y:y + height, x:x + width]
    resized_cropped_image = cv2.resize(cropped_image, (hd_image.shape[1], hd_image.shape[0]))

    black_background = np.zeros(hd_image.shape, dtype=np.uint8)
    black_background[:resized_cropped_image.shape[0], :resized_cropped_image.shape[1]] = resized_cropped_image

    plt.figure(figsize=(10, 8))
    plt.subplot(1, 2, 1)
    plt.imshow(cv2.cvtColor(hd_image, cv2.COLOR_BGR2RGB))
    plt.title('HD Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(black_background)
    plt.title('Cropped Image on Black Background')
    plt.axis('off')

    plt.tight_layout()
    plt.show()
    cv2_imshow(cropped_image)

import cv2
from google.colab.patches import cv2_imshow

image = cv2.imread('/content/images.png')
if image is None:
    print("Error: Image could not be loaded.")
else:
    height, width, channels = image.shape
    print(f"Dimensions: {width}x{height}")
    print(f"Number of channels: {channels}")
    cv2_imshow(image)

import cv2
import os
import datetime
file_path = '/content/images.png'
image = cv2.imread(file_path)
if image is not None:
    file_size = os.path.getsize(file_path)
    timestamp = os.path.getmtime(file_path)
    date_modified = datetime.datetime.fromtimestamp(timestamp)
    bit_depth = image.shape[2] * 8 if len(image.shape) == 3 else 8
    height, width = image.shape[:2]
    print(f"File size: {file_size / 1024:.2f} KB")
    print(f"Date modified: {date_modified}")
    print(f"Bit depth: {bit_depth}")
    print(f"Height: {height}")
    print(f"Width: {width}")
else:
    print("Error: Image could not be loaded.")

import numpy as np
image = np.array([[295.7, -73.4, 101.9], [500.0, 0.8, 255.4]], dtype=np.float64)
converted_image = image.astype(np.uint8)
print("Original image (float64):")
print(image)
print("\nConverted image (uint8):")
print(converted_image)

import cv2
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
image = cv2.imread('/content/images.png', cv2.IMREAD_GRAYSCALE)
if image is None:
    print("Error: Image not found.")
else:
    threshold_value = 127
    _, binarized_image = cv2.threshold(image, threshold_value, 255, cv2.THRESH_BINARY)
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')
    plt.subplot(1, 2, 2)
    plt.imshow(binarized_image, cmap='gray')
    plt.title('Binarized Image (Threshold = 127)')
    plt.axis('off')
    plt.tight_layout()
    plt.show()

import cv2
import matplotlib.pyplot as plt
image = cv2.imread('/content/images.png')
if image is None:
    print("Error: Image not found.")
else:
    height, width, channels = image.shape if len(image.shape) == 3 else (image.shape[0], image.shape[1], 1)
    print(f"Size: {width}x{height}")
    print(f"Number of channels: {channels}")
    if channels == 3:
        print("It is a three-channel image (RGB).")
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        _, binarized_image = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY)
        plt.figure(figsize=(10, 5))
        plt.subplot(1, 3, 1)
        plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        plt.title('Original Image')
        plt.axis('off')
        plt.subplot(1, 3, 2)
        plt.imshow(gray_image, cmap='gray')
        plt.title('Grayscale Image')
        plt.axis('off')
        plt.subplot(1, 3, 3)
        plt.imshow(binarized_image, cmap='gray')
        plt.title('Binarized Image')
        plt.axis('off')
        plt.tight_layout()
        plt.show()
    elif channels == 1:
        print("It is a one-channel image (Grayscale).")
        plt.imshow(image, cmap='gray')
        plt.title('One-Channel Image')
        plt.axis('off')
        plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
image = cv2.imread('/content/images.png', cv2.IMREAD_GRAYSCALE)
if image is None:
    print("Error: Image not found.")
else:
    binarized_image = np.zeros_like(image)
    threshold_value = 127
    height, width = image.shape
    for i in range(height):
        for j in range(width):
            if image[i, j] > threshold_value:
                binarized_image[i, j] = 255
            else:
                binarized_image[i, j] = 0
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')
    plt.subplot(1, 2, 2)
    plt.imshow(binarized_image, cmap='gray')
    plt.title('Binarized Image (Manual)')
    plt.axis('off')
    plt.tight_layout()
    plt.show()

import cv2
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Error: Could not open webcam.")
else:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Failed to grab frame.")
            break
        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        cv2.imshow('Original Frame', frame)
        cv2.imshow('Grayscale Frame', gray_frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
cap.release()
cv2.destroyAllWindows()

# Install necessary libraries
!pip install opencv-python-headless

import cv2
from google.colab.patches import cv2_imshow

img = cv2.imread('/content/Picture1.png')
bright_img = img + 50
cv2_imshow(bright_img)

import cv2
from google.colab.patches import cv2_imshow

img = cv2.imread('/content/Picture1.png')
alpha = 2.0
beta = 50
contrast_img = (img * alpha + beta).clip(0, 255).astype('uint8')
cv2_imshow(contrast_img)
cv2.waitKey(0)

gamma = 2.0
inv_gamma = 1.0 / gamma
gamma_img = ((img / 255.0) ** inv_gamma * 255).astype('uint8')
cv2_imshow(gamma_img)
cv2.waitKey(0)

negative_img = 255 - img
cv2_imshow(negative_img)
cv2.waitKey(0)

img1 = cv2.imread('/content/Picture1.png')
img2 = cv2.imread('/content/Picture2.png')
added_img = img1 + img2
cv2_imshow(added_img)

subtracted_img = img1 - img2
cv2_imshow(subtracted_img)

multiplied_img = img1 * img2
cv2_imshow(multiplied_img)

divided_img = (img1 / (img2 + 1)).astype('uint8')
cv2_imshow(divided_img)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

foreground = cv2.imread('/content/Picture1.png')
background = cv2.imread('/content/Picture2.png')

hsv = cv2.cvtColor(foreground, cv2.COLOR_BGR2HSV)

lower_green = np.array([35, 100, 100])
upper_green = np.array([85, 255, 255])

mask = cv2.inRange(hsv, lower_green, upper_green)
mask_inv = ~mask

fg_part = np.where(mask_inv[..., None], foreground, 0)
bg_part = np.where(mask[..., None], background, 0)

final_img = fg_part + bg_part
cv2_imshow(final_img)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

frame1 = cv2.imread('/content/Picture1.png', 0)
frame2 = cv2.imread('/content/Picture2.png', 0)

diff = np.abs(frame1.astype(np.int16) - frame2.astype(np.int16))

thresh = (diff > 30).astype(np.uint8) * 255
cv2_imshow(thresh)

